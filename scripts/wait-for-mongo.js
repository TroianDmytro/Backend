// scripts/wait-for-mongo.js
const { MongoClient } = require('mongodb');
const fs = require('fs');

// –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞
function getSecret(secretName, envVar, defaultValue) {
    try {
        const secretPath = `/run/secrets/${secretName}`;
        if (fs.existsSync(secretPath)) {
            return fs.readFileSync(secretPath, 'utf8').trim();
        }
    } catch (error) {
        console.warn(`Warning: Could not read secret ${secretName}`);
    }
    return process.env[envVar] || defaultValue;
}

// –ü–æ–ª—É—á–∞–µ–º MongoDB URI –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const mongoUri = process.env.MONGODB_URI ||
    'mongodb+srv://troyant64:msfA0CqyZhkdF5NH@cluster0.icbj0hf.mongodb.net/';

console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
console.log(`üìç URI: ${mongoUri.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')}`);

async function waitForMongo() {
    const maxRetries = 30;
    let retries = 0;

    while (retries < maxRetries) {
        try {
            const client = new MongoClient(mongoUri, {
                serverSelectionTimeoutMS: 5000,
                socketTimeoutMS: 5000
            });

            await client.connect();
            console.log('‚úÖ MongoDB –¥–æ—Å—Ç—É–ø–Ω–∞!');
            await client.close();
            return;
        } catch (error) {
            retries++;
            console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${retries}/${maxRetries}: MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`);
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }

    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB');
    process.exit(1);
}

waitForMongo().catch(console.error);