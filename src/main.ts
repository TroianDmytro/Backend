// src/main.ts
import { NestFactory } from '@nestjs/core';
import { ValidationPipe, Logger } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { SecretsConfig } from './config/secrets.config';

async function bootstrap() {
  const logger = new Logger('Bootstrap');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
    logger.log('üîê –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    const secrets = SecretsConfig.getAllSecrets();

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const app = await NestFactory.create(AppModule);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    app.useGlobalPipes(
      new ValidationPipe({
        whitelist: true,
        forbidNonWhitelisted: true,
        transform: true,
        // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
        skipMissingProperties: false,
      }),
    );

    // Swagger —Ç–æ–ª—å–∫–æ –¥–ª—è development
    if (secrets.nodeEnv !== 'production') {
      const config = new DocumentBuilder()
        .setTitle('NestJS Backend API')
        .setDescription('API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è')
        .setVersion('1.0')
        .addBearerAuth()
        .build();

      const document = SwaggerModule.createDocument(app, config);
      SwaggerModule.setup('api', app, document, {
        swaggerOptions: {
          persistAuthorization: true,
        },
      });

      logger.log(`üìö Swagger –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${secrets.port}/api#`);
    }

    // CORS
    app.enableCors({
      origin: secrets.corsOrigins.split(','),
      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
      credentials: true,
    });

    // Graceful shutdown
    process.on('SIGTERM', async () => {
      logger.log('üõë SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      await app.close();
      process.exit(0);
    });

    // –ó–∞–ø—É—Å–∫
    await app.listen(secrets.port);
    logger.log(`üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${secrets.port}`);
    logger.log(`üåç URL: ${secrets.appUrl}`);

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
}

bootstrap();