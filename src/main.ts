// main.ts
import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const configService = app.get(ConfigService);
  const swaggerReservePath = 'api/docs';
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined –∏ fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const port = configService.get<number>('port') || 8000;
  const host = configService.get<string>('host') || '0.0.0.0';
  const allowedOrigins = configService.get<string[]>('app.allowedOrigins') || ['*'] //[
  //   'http://localhost:3000',
  //   'http://localhost:8000',
  //   'https://neuronest.pp.ua'
  // ];
  const globalPrefix = configService.get<string>('app.globalPrefix') || 'api';
  const appUrl = configService.get<string>('app.url') || (process.env.APP_URL || 'https://neuronest.pp.ua');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è API
  app.setGlobalPrefix(globalPrefix);

  // üåç –ù–ê–°–¢–†–û–ô–ö–ê CORS - –†–ê–ó–†–ï–®–ò–¢–¨ –í–°–ï –î–û–ú–ï–ù–´
  app.enableCors({
    origin: true, // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –õ–Æ–ë–´–• –¥–æ–º–µ–Ω–æ–≤
    credentials: true, // –†–∞–∑—Ä–µ—à–∞–µ—Ç cookies –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'],
    allowedHeaders: [
      'Content-Type',
      'Authorization',
      'Accept',
      'X-Requested-With',
      'Access-Control-Allow-Origin',
      'Origin',
      'X-Forwarded-For',
      'X-Real-IP'
    ],
    optionsSuccessStatus: 200,
    preflightContinue: false,
  });
  console.log('üåç CORS: ‚úÖ –†–ê–ó–†–ï–®–ï–ù–´ –í–°–ï –î–û–ú–ï–ù–´ (origin: true)');


  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      skipMissingProperties: false,
    }),
  );

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
  const swaggerEnabled = configService.get<boolean>('swagger.enabled') !== false;
  if (swaggerEnabled) {
    const swaggerConfig = new DocumentBuilder()
      .setTitle(configService.get<string>('swagger.title') || 'Auth API')
      .setDescription(configService.get<string>('swagger.description') || 'API Documentation')
      .setVersion(configService.get<string>('swagger.version') || '1.0')
      .addTag('auth')
      .addBearerAuth({
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: '–í–≤–µ–¥–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω',
        in: 'header',
      })
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
      // .addServer('http://localhost:8000', 'Local development')
      .addServer(appUrl, 'Production')
      .build();

    const document = SwaggerModule.createDocument(app, swaggerConfig);
    const swaggerPath = configService.get<string>('swagger.path') || swaggerReservePath;

    SwaggerModule.setup(swaggerPath, app, document, {
      swaggerOptions: {
        persistAuthorization: true,
        tryItOutEnabled: true,
        filter: true,
        displayRequestDuration: true,
      },
      customSiteTitle: 'Auth API Documentation',
    });

    console.log(`üìö Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${appUrl}/${swaggerPath}`);
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  app.use('/avatars', (req, res, next) => {
    req.setTimeout(30000); // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
    next();
  });

  // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development
  if (process.env.NODE_ENV !== 'production') {
    app.use((req, res, next) => {
      console.log(`${req.method} ${req.url} - ${new Date().toISOString()}`);
      next();
    });
  }

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  await app.listen(port, host);

  console.log(`üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞: ${await app.getUrl()}`);
  console.log(`üåç API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${appUrl}/${globalPrefix}`);
  console.log(`üìö Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${appUrl}/${swaggerReservePath}`);
  console.log(`üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üåê –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã CORS: ${allowedOrigins.join(', ')}`);
}

bootstrap().catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
  process.exit(1);
});