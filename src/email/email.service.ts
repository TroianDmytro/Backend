// src/email/email.service.ts
import { Injectable, Logger } from '@nestjs/common';
import * as nodemailer from 'nodemailer';

@Injectable()
export class EmailService {
    private readonly logger = new Logger(EmailService.name);
    private transporter: nodemailer.Transporter;

    constructor() {
        this.transporter = nodemailer.createTransport({
            host: process.env.SMTP_HOST || 'smtp.gmail.com',
            port: parseInt(process.env.SMTP_PORT || '587'),
            secure: false,
            auth: {
                user: process.env.SMTP_USER || '',
                pass: process.env.SMTP_PASS || '',
            },
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
     */
    async sendVerificationEmail(email: string, verificationUrl: string, name?: string): Promise<void> {
        const subject = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        const html = `
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å${name ? `, ${name}` : ''}!</h2>
            <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.</p>
            <p>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ email –∞–¥—Ä–µ—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
            <a href="${verificationUrl}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
            </a>
            <p>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
            <p>${verificationUrl}</p>
            <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.</p>
        `;

        await this.sendEmail(email, subject, html);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –∫–æ–¥–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
     */
    async sendPasswordResetCode(email: string, resetCode: string, name?: string): Promise<void> {
        const subject = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è';
        const html = `
            <h2>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ${name ? `, ${name}` : ''}!</p>
            <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.</p>
            <p>–í–∞—à –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</p>
            <h3 style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; font-family: monospace; letter-spacing: 2px;">
                ${resetCode}
            </h3>
            <p>–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.</p>
            <p>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
        `;

        await this.sendEmail(email, subject, html);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
     */
    async sendTeacherApprovalNotification(
        email: string,
        name: string,
        status: 'approved' | 'rejected',
        reason?: string
    ): Promise<void> {
        const isApproved = status === 'approved';
        const subject = isApproved ? '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!' : '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞';

        let html = `<h2>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ</h2>`;
        html += `<p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>`;

        if (isApproved) {
            html += `
                <p style="color: #28a745;">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.</p>
                <p>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:</p>
                <ul>
                    <li>–°–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å—ã</li>
                    <li>–ó–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</li>
                    <li>–ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</li>
                    <li>–£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∫—É—Ä—Å–∞–º–∏</li>
                </ul>
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π!</p>
            `;
        } else {
            html += `
                <p style="color: #dc3545;">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</p>
                ${reason ? `<p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason}</p>` : ''}
                <p>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—á–∞–Ω–∏–π.</p>
            `;
        }

        await this.sendEmail(email, subject, html);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
     */
    async sendBlockNotification(
        email: string,
        name: string,
        isBlocked: boolean,
        reason?: string
    ): Promise<void> {
        const subject = isBlocked ? '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';

        let html = `<h2>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</h2>`;
        html += `<p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>`;

        if (isBlocked) {
            html += `
                <p style="color: #dc3545;">–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</p>
                ${reason ? `<p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason}</p>` : ''}
                <p>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>
            `;
        } else {
            html += `
                <p style="color: #28a745;">–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.</p>
                <p>–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.</p>
            `;
        }

        await this.sendEmail(email, subject, html);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email
     */
    async sendEmailChangeNotification(
        oldEmail: string,
        newEmail: string,
        verificationUrl: string
    ): Promise<void> {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä—ã–π email
        const oldEmailSubject = 'Email –∞–¥—Ä–µ—Å –∏–∑–º–µ–Ω–µ–Ω';
        const oldEmailHtml = `
            <h2>–ò–∑–º–µ–Ω–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞</h2>
            <p>–í–∞—à email –∞–¥—Ä–µ—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω —Å ${oldEmail} –Ω–∞ ${newEmail}.</p>
            <p>–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</p>
        `;

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        const newEmailSubject = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –∞–¥—Ä–µ—Å';
        const newEmailHtml = `
            <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ email –∞–¥—Ä–µ—Å–∞</h2>
            <p>–í–∞—à email –∞–¥—Ä–µ—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newEmail}.</p>
            <p>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</p>
            <a href="${verificationUrl}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–≤—ã–π email
            </a>
        `;

        await Promise.all([
            this.sendEmail(oldEmail, oldEmailSubject, oldEmailHtml),
            this.sendEmail(newEmail, newEmailSubject, newEmailHtml)
        ]);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
     */
    async sendSubscriptionActivationNotification(email: string, name: string): Promise<void> {
        const subject = '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞';
        const html = `
            <h2>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
            <p>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.</p>
            <p>–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞.</p>
            <p>–£–¥–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è! üìö</p>
        `;

        await this.sendEmail(email, subject, html);
    }

    async sendSubscriptionCancellationNotification(
        email: string,
        name: string,
        reason: string,
        immediate: boolean
    ): Promise<void> {
        const subject = '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞';
        const html = `
            <h2>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
            <p>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</p>
            <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason}</p>
            <p>–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º ${immediate ? '–ø—Ä–µ–∫—Ä–∞—â–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ' : '–±—É–¥–µ—Ç –ø—Ä–µ–∫—Ä–∞—â–µ–Ω –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'}.</p>
        `;

        await this.sendEmail(email, subject, html);
    }

    async sendSubscriptionExpirationNotification(email: string, name: string): Promise<void> {
        const subject = '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞';
        const html = `
            <h2>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
            <p>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.</p>
            <p>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.</p>
        `;

        await this.sendEmail(email, subject, html);
    }

    async sendSubscriptionExpiringNotification(email: string, name: string, endDate: Date): Promise<void> {
        const daysLeft = Math.ceil((endDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));
        const subject = '–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç';
        const html = `
            <h2>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç</h2>
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!</p>
            <p>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} ${daysLeft === 1 ? '–¥–µ–Ω—å' : '–¥–Ω–µ–π'}.</p>
            <p>–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.</p>
        `;

        await this.sendEmail(email, subject, html);
    }

    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
     */
    private async sendEmail(to: string, subject: string, html: string): Promise<void> {
        try {
            if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
                this.logger.warn('SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
                this.logger.debug(`TO: ${to}, SUBJECT: ${subject}`);
                return;
            }

            const info = await this.transporter.sendMail({
                from: `"–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞" <${process.env.SMTP_USER}>`,
                to,
                subject,
                html
            });

            this.logger.log(`Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${info.messageId} -> ${to}`);
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${error.message}`, error.stack);
            throw error;
        }
    }
}