// src/auth/auth.controller.ts
import { Controller, Post, Body, Get, Param, Query, Logger, Request, NotFoundException, BadRequestException, Res, UseGuards } from '@nestjs/common';
import { Response } from 'express';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiBody, ApiBearerAuth } from '@nestjs/swagger';
import { AuthService } from './auth.service';
import { CreateUserDto, VerifyEmailCodeDto } from '../users/dto/create-user.dto';
import { LoginUserDto } from '../users/dto/login-user.dto';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { GoogleAuthGuard } from './guards/google-auth.guard';
import { ConfigService } from '@nestjs/config';

@ApiTags('auth')
@Controller('auth')
export class AuthController {
    private readonly logger = new Logger(AuthController.name);

    constructor(private authService: AuthService, private configService: ConfigService) { }

    // === –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø GOOGLE OAUTH ===

    /**
     * GET /auth/google - –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
     * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
     */
    @Get('google')
    @UseGuards(GoogleAuthGuard)
    @ApiOperation({
        summary: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        description: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ /auth/google/callback'
    })
    @ApiResponse({
        status: 302,
        description: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ Google OAuth'
    })
    async googleAuth(@Request() req) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ Google
        // –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ GoogleAuthGuard –∏ GoogleStrategy
    }

    /**
     * GET /auth/google/callback - Callback –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google
     * Google –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Å—é–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    @Get('google/callback')
    @UseGuards(GoogleAuthGuard)
    @ApiOperation({
        summary: 'Callback Google OAuth',
        description: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Google –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç/–∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    })
    @ApiResponse({
        status: 302,
        description: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å —Ç–æ–∫–µ–Ω–æ–º'
    })
    @ApiResponse({
        status: 400,
        description: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google'
    })
    async googleAuthRedirect(@Request() req, @Res() res: Response) {
        try {
            this.logger.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ Google OAuth callback');

            if (!req.user) {
                this.logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ req.user');
                return this.redirectToFrontendWithError(res, 'google_auth_failed');
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const tokenData = await this.authService.generateGoogleJWT(req.user);

            this.logger.log(`‚úÖ Google OAuth —É—Å–ø–µ—à–Ω–æ: ${req.user.email}`);

            // –ü–æ–ª—É—á–∞–µ–º URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const frontendUrl = this.configService.get<string>('app.frontendUrl');

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å —Ç–æ–∫–µ–Ω–æ–º –≤ URL
            const redirectUrl = `${frontendUrl}/auth/google/success?token=${tokenData.access_token}&user=${encodeURIComponent(JSON.stringify(tokenData.user))}`;

            return res.redirect(redirectUrl);

        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ Google OAuth callback: ${error.message}`, error.stack);
            return this.redirectToFrontendWithError(res, 'google_auth_error');
        }
    }

    /**
     * POST /auth/google/link - –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
     * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å Google
     */
    @Post('google/link')
    @UseGuards(JwtAuthGuard)
    @ApiBearerAuth()
    @ApiOperation({
        summary: '–°–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞',
        description: '–°–≤—è–∑—ã–≤–∞–µ—Ç Google –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    })
    @ApiResponse({
        status: 200,
        description: 'Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω'
    })
    @ApiResponse({
        status: 409,
        description: 'Google –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    })
    async linkGoogleAccount(@Request() req) {
        const userId = req.user?.userId;

        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Google
        // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏–ª–∏ frontend –ø—Ä–æ—Ü–µ—Å—Å

        return {
            message: '–î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è Google –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ',
            linkUrl: `/auth/google?link=${userId}`
        };
    }

    /**
     * POST /auth/google/unlink - –û—Ç–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞
     * –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Google –∞–∫–∫–∞—É–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Post('google/unlink')
    @UseGuards(JwtAuthGuard)
    @ApiBearerAuth()
    @ApiOperation({
        summary: '–û—Ç–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞',
        description: '–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Google –∞–∫–∫–∞—É–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    })
    @ApiResponse({
        status: 200,
        description: 'Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
    })
    @ApiResponse({
        status: 400,
        description: '–ù–µ–ª—å–∑—è –æ—Ç–≤—è–∑–∞—Ç—å Google –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –ø–∞—Ä–æ–ª—è'
    })
    async unlinkGoogleAccount(@Request() req) {
        const userId = req.user?.userId;

        this.logger.log(`–û—Ç–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

        await this.authService.unlinkGoogleAccount(userId);

        return {
            success: true,
            message: 'Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
        };
    }

    /**
     * GET /auth/google/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ Google –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    @Get('google/status')
    @UseGuards(JwtAuthGuard)
    @ApiBearerAuth()
    @ApiOperation({
        summary: '–°—Ç–∞—Ç—É—Å Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–º Google –∞–∫–∫–∞—É–Ω—Ç–µ'
    })
    @ApiResponse({
        status: 200,
        description: '–°—Ç–∞—Ç—É—Å Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    })
    async getGoogleStatus(@Request() req) {
        const userId = req.user?.userId;
        const user = await this.authService.getUserGoogleStatus(userId);

        return {
            isLinked: user.is_google_user,
            googleId: user.is_google_user ? user.googleId : null,
            lastGoogleLogin: user.last_google_login,
            hasValidToken: user.isGoogleTokenValid?.() || false
        };
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –æ—à–∏–±–∫–æ–π
     */
    private redirectToFrontendWithError(res: Response, error: string) {
        const frontendUrl = this.configService.get<string>('app.frontendUrl');
        const redirectUrl = `${frontendUrl}/auth/google/error?error=${error}`;
        return res.redirect(redirectUrl);
    }

    /**
     * HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
     */
    private getGoogleSuccessPage(token: string, user: any): string {
        return `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google - –£—Å–ø–µ—à–Ω–æ</title>
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .success { color: #28a745; font-size: 24px; margin-bottom: 20px; }
                .token { background: #f8f9fa; padding: 10px; border-radius: 5px; word-break: break-all; }
                .button { background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px; }
            </style>
            <script>
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –æ–∫–Ω—É
                if (window.opener) {
                    window.opener.postMessage({
                        type: 'GOOGLE_AUTH_SUCCESS',
                        token: '${token}',
                        user: ${JSON.stringify(user)}
                    }, '*');
                    window.close();
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
                    localStorage.setItem('auth_token', '${token}');
                    localStorage.setItem('user_data', '${JSON.stringify(user)}');
                }
            </script>
        </head>
        <body>
            <div class="success">‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google —É—Å–ø–µ—à–Ω–∞!</div>
            <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}!</p>
            <div class="token">
                <strong>–¢–æ–∫–µ–Ω:</strong><br>
                ${token}
            </div>
            <a href="${this.configService.get<string>('app.frontendUrl')}" class="button">
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            </a>
        </body>
        </html>
        `;
    }

    /**
     * HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
     */
    private getGoogleErrorPage(error: string): string {
        return `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google</title>
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .error { color: #dc3545; font-size: 24px; margin-bottom: 20px; }
                .button { background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px; }
            </style>
        </head>
        <body>
            <div class="error">‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google</div>
            <p>–ö–æ–¥ –æ—à–∏–±–∫–∏: ${error}</p>
            <a href="${this.configService.get<string>('app.frontendUrl')}" class="button">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            </a>
        </body>
        </html>
        `;
    }

    @Post('register/send-code')
    @ApiOperation({
        summary: '–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ email, –ø–æ–ª—É—á–∞–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    })
    @ApiResponse({ status: 201, description: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' })
    @ApiResponse({ status: 400, description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' })
    @ApiResponse({ status: 409, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' })
    @ApiBody({ type: CreateUserDto })
    async sendVerificationCode(@Body() createUserDto: CreateUserDto) {
        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${createUserDto.email}`);
        return this.authService.sendVerificationCode(createUserDto);
    }

    @Post('register/verify-code')
    @ApiOperation({
        summary: '–®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–¥, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –Ω–∞ email'
    })
    @ApiResponse({
        status: 201,
        description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email'
    })
    @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥' })
    @ApiBody({ type: VerifyEmailCodeDto })
    async verifyCodeAndRegister(@Body() verifyDto: VerifyEmailCodeDto) {
        this.logger.log(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è: ${verifyDto.email}`);
        return this.authService.verifyCodeAndCompleteRegistration(verifyDto);
    }

    @Post('login')
    @ApiOperation({
        summary: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é',
        description: '–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω –≤–º–µ—Å—Ç–æ email'
    })
    @ApiResponse({ status: 200, description: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' })
    @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
    @ApiBody({ type: LoginUserDto })
    async login(@Body() loginUserDto: LoginUserDto) {
        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥: ${loginUserDto.login}`);
        return this.authService.login(loginUserDto);
    }

    @Post('resend-code')
    @ApiOperation({
        summary: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ email'
    })
    @ApiResponse({ status: 200, description: '–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' })
    @ApiResponse({ status: 404, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    @ApiResponse({ status: 409, description: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' })
    @ApiBody({
        schema: {
            type: 'object',
            properties: {
                email: { type: 'string', format: 'email', example: 'user@example.com' }
            },
            required: ['email']
        }
    })
    async resendVerificationCode(@Body('email') email: string) {
        if (!email) {
            this.logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è email');
            throw new BadRequestException('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        try {
            this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞: ${email}`);
            const result = await this.authService.resendVerificationEmail(email);
            return {
                success: true,
                message: result.message
            };
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: ${error.message}`);
            throw error;
        }
    }

    // –°—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    @Get('verify-email')
    @ApiOperation({ summary: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ —Ç–æ–∫–µ–Ω—É (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)' })
    @ApiResponse({ status: 200, description: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' })
    @ApiResponse({ status: 404, description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω' })
    @ApiQuery({ name: 'token', description: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', required: true })
    async verifyEmail(@Query('token') token: string, @Res() res: Response) {
        if (!token) {
            this.logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
            return res.status(400).send(this.getErrorPage('–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
        }

        try {
            this.logger.log(`–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email —Å —Ç–æ–∫–µ–Ω–æ–º: ${token.substring(0, 8)}...`);
            const result = await this.authService.verifyEmail(token);
            return res.send(this.getSuccessPage(result.user.email));
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email: ${error.message}`);
            return res.status(400).send(this.getErrorPage(error.message));
        }
    }

    @Post('forgot-password')
    @ApiOperation({ summary: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è' })
    @ApiResponse({ status: 200, description: '–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' })
    @ApiResponse({ status: 404, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    @ApiBody({
        schema: {
            type: 'object',
            properties: {
                email: { type: 'string', format: 'email', example: 'user@example.com' }
            },
            required: ['email']
        }
    })
    async forgotPassword(@Body('email') email: string) {
        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è: ${email}`);

        try {
            const result = await this.authService.forgotPassword(email);
            return {
                success: true,
                message: result.message
            };
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${error.message}`);
            if (error instanceof NotFoundException) {
                throw error;
            }
            throw new BadRequestException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    }

    @Post('reset-password')
    @ApiOperation({ summary: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞' })
    @ApiResponse({ status: 200, description: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' })
    @ApiResponse({ status: 400, description: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥' })
    @ApiBody({
        schema: {
            type: 'object',
            properties: {
                code: { type: 'string', example: '123456', description: '–ö–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞' },
                newPassword: { type: 'string', example: 'newPassword123', description: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å' }
            },
            required: ['code', 'newPassword']
        }
    })
    async resetPassword(
        @Body('code') code: string,
        @Body('newPassword') newPassword: string
    ) {
        this.logger.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å –∫–æ–¥–æ–º: ${code.substring(0, 3)}...`);

        try {
            const result = await this.authService.resetPasswordWithCode(code, newPassword);
            return {
                success: true,
                message: result.message
            };
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${error.message}`);
            throw new BadRequestException(error.message);
        }
    }

    @Post('change-password')
    @UseGuards(JwtAuthGuard)
    @ApiBearerAuth()
    @ApiOperation({ summary: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' })
    @ApiResponse({ status: 200, description: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' })
    @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' })
    @ApiBody({
        schema: {
            type: 'object',
            properties: {
                userId: { type: 'string', example: '507f1f77bcf86cd799439011', description: '–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' },
                currentPassword: { type: 'string', example: 'currentPassword123' },
                newPassword: { type: 'string', example: 'newPassword123' }
            },
            required: ['currentPassword', 'newPassword']
        }
    })
    async changePassword(
        @Request() req,
        @Body() body: { userId?: string; currentPassword: string; newPassword: string }
    ) {
        const userId = req.user?.userId || body.userId;
        const userLogin = req.user?.login || '—Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        if (!userId) {
            throw new BadRequestException('userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }

        this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLogin} –º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å`);

        try {
            const result = await this.authService.changePassword(
                userId,
                body.currentPassword,
                body.newPassword
            );
            return {
                success: true,
                message: result.message
            };
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${error.message}`);
            throw new BadRequestException(error.message);
        }
    }

    // HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    private getSuccessPage(email: string): string {
        return `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                margin: 0;
                background-color: #f5f5f5;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                text-align: center;
                max-width: 400px;
            }
            .success-icon {
                width: 80px;
                height: 80px;
                margin: 0 auto 20px;
                background-color: #4CAF50;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .checkmark {
                color: white;
                font-size: 40px;
            }
            h1 {
                color: #333;
                margin-bottom: 10px;
            }
            .email {
                color: #666;
                font-style: italic;
                margin-bottom: 20px;
            }
            .message {
                color: #555;
                line-height: 1.6;
                margin-bottom: 30px;
            }
            .button {
                display: inline-block;
                padding: 12px 30px;
                background-color: #4CAF50;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s;
            }
            .button:hover {
                background-color: #45a049;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="success-icon">
                <span class="checkmark">‚úì</span>
            </div>
            <h1>Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</h1>
            <p class="email">${email}</p>
            <p class="message">
                –í–∞—à email –∞–¥—Ä–µ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. 
                –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
            </p>
            <a href="/login" class="button">–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Ö–æ–¥—É</a>
        </div>
    </body>
    </html>
    `;
    }

    private getErrorPage(message: string): string {
        return `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                margin: 0;
                background-color: #f5f5f5;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                text-align: center;
                max-width: 400px;
            }
            .error-icon {
                width: 80px;
                height: 80px;
                margin: 0 auto 20px;
                background-color: #f44336;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .cross {
                color: white;
                font-size: 40px;
            }
            h1 {
                color: #333;
                margin-bottom: 20px;
            }
            .message {
                color: #555;
                line-height: 1.6;
                margin-bottom: 30px;
            }
            .button {
                display: inline-block;
                padding: 12px 30px;
                background-color: #2196F3;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s;
            }
            .button:hover {
                background-color: #1976D2;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="error-icon">
                <span class="cross">‚úï</span>
            </div>
            <h1>–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h1>
            <p class="message">${message}</p>
            <a href="/resend-verification" class="button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ</a>
        </div>
    </body>
    </html>
    `;
    }
}