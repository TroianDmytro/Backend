// src/auth/auth.controller.ts
import { Controller, Post, Body, Get, Param, Query, Logger, Request, NotFoundException, BadRequestException, Res, UseGuards } from '@nestjs/common';
import { Response } from 'express';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiBody, ApiBearerAuth } from '@nestjs/swagger';
import { AuthService } from './auth.service';
import { CreateUserDto, VerifyEmailCodeDto } from '../users/dto/create-user.dto';
import { LoginUserDto } from '../users/dto/login-user.dto';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { GoogleAuthGuard } from './guards/google-auth.guard';
import { ConfigService } from '@nestjs/config';
import { Public } from './decorators/public.decorator';

@ApiTags('auth')
@Controller('auth')
export class AuthController {
    private readonly logger = new Logger(AuthController.name);

    constructor(private authService: AuthService, private configService: ConfigService) { }

    // === –ù–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø GOOGLE OAUTH ===
    /**
        * GET /auth/google - –° –û–¢–õ–ê–î–ö–û–ô
        */
    @Get('google')
    @Public()
    @UseGuards(GoogleAuthGuard)
    @ApiOperation({
        summary: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        description: '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google'
    })
    async googleAuth(@Request() req) {
        console.log('üöÄ Google OAuth –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω');
        console.log('üîß –ö–æ–Ω—Ñ–∏–≥ Google:', {
            clientId: this.configService.get('google.clientId') ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω',
            callbackUrl: this.configService.get('google.callbackUrl'),
            nodeEnv: process.env.NODE_ENV || 'development'
        });
        console.log('üåç Headers:', req.headers);

        // Passport –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ Google
    }


    // GET /auth/test/config - –¢–ï–°–¢–û–í–´–ô —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    @Get('test/config')
    @Public()
    @ApiOperation({
        summary: '–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google OAuth',
        description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)'
    })
    getGoogleConfig() {
        return {
            environment: process.env.NODE_ENV || 'development',
            googleConfig: {
                clientId: this.configService.get('google.clientId'),
                callbackUrl: this.configService.get('google.callbackUrl'),
                hasClientSecret: this.configService.get('google.clientSecret')
            },
            appConfig: {
                appUrl: this.configService.get('app.url'),
                frontendUrl: this.configService.get('app.frontendUrl'),
                allowedOrigins: this.configService.get('app.allowedOrigins')
            }
        };
    }


    // GET /auth/test - –¢–µ—Å—Ç–æ–≤–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è Google OAuth
    @Get('test')
    @Public()
    @ApiOperation({
        summary: '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è Google OAuth',
        description: 'HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google OAuth'
    })
    @ApiResponse({
        status: 200,
        description: 'HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    })
    getTestPage(@Res() res: Response) {
        const html = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–¢–µ—Å—Ç Google OAuth</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    max-width: 600px;
                    margin: 50px auto;
                    padding: 20px;
                    text-align: center;
                }
                .button {
                    background-color: #4285f4;
                    color: white;
                    padding: 12px 24px;
                    text-decoration: none;
                    border-radius: 5px;
                    font-size: 16px;
                    margin: 10px;
                    display: inline-block;
                    border: none;
                    cursor: pointer;
                }
                .button:hover {
                    background-color: #3367d6;
                }
                .config {
                    background-color: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                    margin: 20px 0;
                    text-align: left;
                }
                .success {
                    color: #28a745;
                    font-weight: bold;
                }
                .error {
                    color: #dc3545;
                    font-weight: bold;
                }
            </style>
        </head>
        <body>
            <h1>üîß –¢–µ—Å—Ç Google OAuth</h1>
            
            <div class="config">
                <h3>–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</h3>
                <p><strong>Environment:</strong> ${process.env.NODE_ENV || 'development'}</p>
                <p><strong>App URL:</strong> ${this.configService.get('app.url')}</p>
                <p><strong>Callback URL:</strong> ${this.configService.get('google.callbackUrl')}</p>
                <p><strong>Client ID:</strong> ${this.configService.get('google.clientId') ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}</p>
                <p><strong>Client Secret:</strong> ${this.configService.get('google.clientSecret') ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}</p>
            </div>

            <h3>üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</h3>
            <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google</p>
            
            <a href="/api/auth/google" class="button">
                üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
            </a>

            <div style="margin-top: 30px;">
                <h4>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h4>
                <ol style="text-align: left;">
                    <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ Google Console –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ URL</li>
                    <li>Authorized JavaScript origins: <code>http://localhost:8000</code></li>
                    <li>Authorized redirect URIs: <code>http://localhost:8000/api/auth/google/callback</code></li>
                    <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Swagger –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OAuth</li>
                </ol>
            </div>

            <div style="margin-top: 20px;">
                <a href="/api/docs" class="button" style="background-color: #6c757d;">
                    üìö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ Swagger
                </a>
            </div>
        </body>
        </html>
        `;

        res.setHeader('Content-Type', 'text/html');
        return res.send(html);
    }

    /**
      * GET /auth/google/callback - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô callback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      */
    @Get('google/callback')
    @Public()
    @UseGuards(GoogleAuthGuard)
    @ApiOperation({
        summary: 'Callback Google OAuth',
        description: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Google –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    })
    async googleAuthRedirect(@Request() req, @Res() res: Response) {
        try {
            console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ Google OAuth callback');
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ req:', req.user ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

            if (!req.user) {
                console.error('‚ùå req.user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ callback');
                return this.showErrorPage(res, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const tokenData = await this.authService.generateGoogleJWT(req.user);
            console.log(`‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è: ${req.user.email}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            const showDebugPage = process.env.GOOGLE_AUTH_DEBUG === 'true';
            const frontendUrl = this.configService.get<string>('app.frontendUrl');
            
            if (showDebugPage) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–∫–µ–Ω–æ–º
                console.log('üîß –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                return res.send(this.getGoogleSuccessPage(tokenData.access_token, tokenData.user));
            } else {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
                console.log(`üöÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: ${frontendUrl}`);
                const redirectUrl = `${frontendUrl}?token=${tokenData.access_token}&user=${encodeURIComponent(JSON.stringify(tokenData.user))}`;
                return res.redirect(redirectUrl);
            }

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ Google OAuth callback:`, error);
            return this.showErrorPage(res, `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        }
    }



    /**
     * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
     */
    private redirectToFrontendWithError(res: Response, error: string) {
        const frontendUrl = this.configService.get<string>('app.frontendUrl') || 'https://neuronest.pp.ua';
        const redirectUrl = `${frontendUrl}/auth/error?error=${error}`;
        console.log(`‚ùå –†–µ–¥–∏—Ä–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π: ${redirectUrl}`);
        return res.redirect(redirectUrl);
    }

    /**
     * POST /auth/google/link - –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
     * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å Google
     */
    @Post('google/link')
    @Public()
    @UseGuards(JwtAuthGuard)
    @ApiBearerAuth()
    @ApiOperation({
        summary: '–°–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞',
        description: '–°–≤—è–∑—ã–≤–∞–µ—Ç Google –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    })
    @ApiResponse({
        status: 200,
        description: 'Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω'
    })
    @ApiResponse({
        status: 409,
        description: 'Google –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    })
    async linkGoogleAccount(@Request() req) {
        const userId = req.user?.userId;

        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Google
        // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –∏–ª–∏ frontend –ø—Ä–æ—Ü–µ—Å—Å

        return {
            message: '–î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è Google –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ',
            linkUrl: `/auth/google?link=${userId}`
        };
    }

    /**
     * POST /auth/google/unlink - –û—Ç–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞
     * –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Google –∞–∫–∫–∞—É–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Post('google/unlink')
    @Public()
    @UseGuards(JwtAuthGuard)
    @ApiBearerAuth()
    @ApiOperation({
        summary: '–û—Ç–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞',
        description: '–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Google –∞–∫–∫–∞—É–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    })
    @ApiResponse({
        status: 200,
        description: 'Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
    })
    @ApiResponse({
        status: 400,
        description: '–ù–µ–ª—å–∑—è –æ—Ç–≤—è–∑–∞—Ç—å Google –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –ø–∞—Ä–æ–ª—è'
    })
    async unlinkGoogleAccount(@Request() req) {
        const userId = req.user?.userId;

        this.logger.log(`–û—Ç–≤—è–∑—ã–≤–∞–Ω–∏–µ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

        await this.authService.unlinkGoogleAccount(userId);

        return {
            success: true,
            message: 'Google –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω'
        };
    }

    /**
     * GET /auth/google/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ Google –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    @Get('google/status')
    @Public()
    @UseGuards(JwtAuthGuard)
    @ApiBearerAuth()
    @ApiOperation({
        summary: '–°—Ç–∞—Ç—É—Å Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–º Google –∞–∫–∫–∞—É–Ω—Ç–µ'
    })
    @ApiResponse({
        status: 200,
        description: '–°—Ç–∞—Ç—É—Å Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    })
    async getGoogleStatus(@Request() req) {
        const userId = req.user?.userId;
        const user = await this.authService.getUserGoogleStatus(userId);

        return {
            isLinked: user.is_google_user,
            googleId: user.is_google_user ? user.googleId : null,
            lastGoogleLogin: user.last_google_login,
            hasValidToken: user.isGoogleTokenValid?.() || false
        };
    }

    /**
     * –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    private getGoogleSuccessPage(token: string, user: any): string {
        return `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Google OAuth - –£—Å–ø–µ—à–Ω–æ!</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    background-color: #f5f5f5;
                }
                .container {
                    background: white;
                    border-radius: 10px;
                    padding: 30px;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                }
                .success-header {
                    color: #28a745;
                    text-align: center;
                    margin-bottom: 30px;
                }
                .user-info {
                    background: #e8f5e8;
                    padding: 20px;
                    border-radius: 8px;
                    margin-bottom: 20px;
                }
                .token-section {
                    background: #fff3cd;
                    padding: 20px;
                    border-radius: 8px;
                    border-left: 4px solid #ffc107;
                    margin-bottom: 20px;
                }
                .token-display {
                    background: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                    font-family: monospace;
                    font-size: 12px;
                    word-break: break-all;
                    margin-top: 10px;
                    max-height: 150px;
                    overflow-y: auto;
                }
                .button {
                    background-color: #007bff;
                    color: white;
                    padding: 12px 24px;
                    text-decoration: none;
                    border-radius: 5px;
                    display: inline-block;
                    margin: 10px 5px;
                    border: none;
                    cursor: pointer;
                }
                .copy-button {
                    background-color: #28a745;
                }
                .actions {
                    text-align: center;
                    margin-top: 30px;
                }
                .info-grid {
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 15px;
                    margin-top: 15px;
                }
                @media (max-width: 600px) {
                    .info-grid {
                        grid-template-columns: 1fr;
                    }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="success-header">
                    <h1>üéâ Google OAuth –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h1>
                    <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name || user.email}!</p>
                </div>

                <div class="user-info">
                    <h3>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h3>
                    <div class="info-grid">
                        <div><strong>ID:</strong> ${user.id}</div>
                        <div><strong>Email:</strong> ${user.email}</div>
                        <div><strong>–ò–º—è:</strong> ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                        <div><strong>–§–∞–º–∏–ª–∏—è:</strong> ${user.second_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                        <div><strong>–õ–æ–≥–∏–Ω:</strong> ${user.login || '–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π'}</div>
                        <div><strong>Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:</strong> ${user.isEmailVerified ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</div>
                        <div><strong>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</strong> ${user.provider || 'google'}</div>
                        <div><strong>–†–æ–ª–∏:</strong> ${(user.roles || []).join(', ')}</div>
                    </div>
                </div>

                <div class="token-section">
                    <h3>üîê JWT Access Token:</h3>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤:</p>
                    <div class="token-display" id="tokenDisplay">${token}</div>
                    <button class="button copy-button" onclick="copyToken()">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω</button>
                </div>

                <div class="actions">
                    <a href="/api/docs" class="button">üìö Swagger UI</a>
                    <a href="/api/auth/test" class="button">üîß –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a>
                    <a href="/api/auth/google/status" class="button">üìä –°—Ç–∞—Ç—É—Å Google</a>
                </div>

                <div style="margin-top: 30px; padding: 15px; background: #d1ecf1; border-radius: 5px;">
                    <h4>üí° –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</h4>
                    <ol>
                        <li><strong>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω</strong> –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ <code>Authorization: Bearer YOUR_TOKEN</code></li>
                        <li><strong>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API</strong> —á–µ—Ä–µ–∑ Swagger UI —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º</li>
                        <li><strong>–í production</strong> —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –≤–∞—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥</li>
                    </ol>
                </div>
            </div>

            <script>
                function copyToken() {
                    const tokenText = document.getElementById('tokenDisplay').textContent;
                    navigator.clipboard.writeText(tokenText).then(() => {
                        alert('–¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                    }).catch(err => {
                        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ', err);
                        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                        const textArea = document.createElement('textarea');
                        textArea.value = tokenText;
                        document.body.appendChild(textArea);
                        textArea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textArea);
                        alert('–¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
                    });
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                localStorage.setItem('auth_token', '${token}');
                localStorage.setItem('user_data', '${JSON.stringify(user).replace(/'/g, "\\'")}');
                
                console.log('‚úÖ –¢–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
                console.log('Token:', '${token}');
                console.log('User:', ${JSON.stringify(user)});
            </script>
        </body>
        </html>
        `;
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏
     */
    private showErrorPage(res: Response, errorMessage: string): Response {
        const html = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</title>
            <style>
                body { font-family: Arial, sans-serif; max-width: 600px; margin: 50px auto; padding: 20px; text-align: center; }
                .error { color: #dc3545; background: #f8d7da; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .button { background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 10px; }
            </style>
        </head>
        <body>
            <h1>‚ùå –û—à–∏–±–∫–∞ Google OAuth</h1>
            <div class="error">
                <strong>–û—à–∏–±–∫–∞:</strong> ${errorMessage}
            </div>
            <a href="/api/auth/test" class="button">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑</a>
            <a href="/api/docs" class="button">üìö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ Swagger</a>
        </body>
        </html>
        `;
        return res.status(400).send(html);
    }

    /**
     * HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google
     */
    private getGoogleErrorPage(error: string): string {
        return `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google</title>
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                .error { color: #dc3545; font-size: 24px; margin-bottom: 20px; }
                .button { background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 20px; }
            </style>
        </head>
        <body>
            <div class="error">‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google</div>
            <p>–ö–æ–¥ –æ—à–∏–±–∫–∏: ${error}</p>
            <a href="${this.configService.get<string>('app.frontendUrl')}" class="button">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            </a>
        </body>
        </html>
        `;
    }

    @Post('register/send-code')
    @Public()
    @ApiOperation({
        summary: '–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ email, –ø–æ–ª—É—á–∞–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
    })
    @ApiResponse({ status: 201, description: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' })
    @ApiResponse({ status: 400, description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' })
    @ApiResponse({ status: 409, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' })
    @ApiBody({ type: CreateUserDto })
    async sendVerificationCode(@Body() createUserDto: CreateUserDto) {
        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${createUserDto.email}`);
        return this.authService.sendVerificationCode(createUserDto);
    }

    @Post('register/verify-code')
    @Public()
    @ApiOperation({
        summary: '–®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–¥, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –Ω–∞ email'
    })
    @ApiResponse({
        status: 201,
        description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email'
    })
    @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥' })
    @ApiBody({ type: VerifyEmailCodeDto })
    async verifyCodeAndRegister(@Body() verifyDto: VerifyEmailCodeDto) {
        this.logger.log(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è: ${verifyDto.email}`);
        return this.authService.verifyCodeAndCompleteRegistration(verifyDto);
    }

    @Post('login')
    @Public()
    @ApiOperation({
        summary: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é',
        description: '–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–≥–∏–Ω –≤–º–µ—Å—Ç–æ email'
    })
    @ApiResponse({ status: 200, description: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' })
    @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' })
    @ApiBody({ type: LoginUserDto })
    async login(@Body() loginUserDto: LoginUserDto) {
        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥: ${loginUserDto.login}`);
        return this.authService.login(loginUserDto);
    }

    @Post('resend-code')
    @Public()
    @ApiOperation({
        summary: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –Ω–∞ email'
    })
    @ApiResponse({ status: 200, description: '–ù–æ–≤—ã–π –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' })
    @ApiResponse({ status: 404, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    @ApiResponse({ status: 409, description: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' })
    @ApiBody({
        schema: {
            type: 'object',
            properties: {
                email: { type: 'string', format: 'email', example: 'user@example.com' }
            },
            required: ['email']
        }
    })
    async resendVerificationCode(@Body('email') email: string) {
        if (!email) {
            this.logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è email');
            throw new BadRequestException('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        try {
            this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞: ${email}`);
            const result = await this.authService.resendVerificationEmail(email);
            return {
                success: true,
                message: result.message
            };
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: ${error.message}`);
            throw error;
        }
    }

    // –°—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    @Get('verify-email')
    @Public()
    @ApiOperation({ summary: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –ø–æ —Ç–æ–∫–µ–Ω—É (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)' })
    @ApiResponse({ status: 200, description: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' })
    @ApiResponse({ status: 404, description: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω' })
    @ApiQuery({ name: 'token', description: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', required: true })
    async verifyEmail(@Query('token') token: string, @Res() res: Response) {
        if (!token) {
            this.logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
            return res.status(400).send(this.getErrorPage('–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
        }

        try {
            this.logger.log(`–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email —Å —Ç–æ–∫–µ–Ω–æ–º: ${token.substring(0, 8)}...`);
            const result = await this.authService.verifyEmail(token);
            return res.send(this.getSuccessPage(result.user.email));
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email: ${error.message}`);
            return res.status(400).send(this.getErrorPage(error.message));
        }
    }

    @Post('forgot-password')
    @Public()
    @ApiOperation({ summary: '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è' })
    @ApiResponse({ status: 200, description: '–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' })
    @ApiResponse({ status: 404, description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    @ApiBody({
        schema: {
            type: 'object',
            properties: {
                email: { type: 'string', format: 'email', example: 'user@example.com' }
            },
            required: ['email']
        }
    })
    async forgotPassword(@Body('email') email: string) {
        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è: ${email}`);

        try {
            const result = await this.authService.forgotPassword(email);
            return {
                success: true,
                message: result.message
            };
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${error.message}`);
            if (error instanceof NotFoundException) {
                throw error;
            }
            throw new BadRequestException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    }

    @Post('reset-password')
    @Public()
    @ApiOperation({ summary: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞' })
    @ApiResponse({ status: 200, description: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' })
    @ApiResponse({ status: 400, description: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥' })
    @ApiBody({
        schema: {
            type: 'object',
            properties: {
                code: { type: 'string', example: '123456', description: '–ö–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞' },
                newPassword: { type: 'string', example: 'newPassword123', description: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å' }
            },
            required: ['code', 'newPassword']
        }
    })
    async resetPassword(
        @Body('code') code: string,
        @Body('newPassword') newPassword: string
    ) {
        this.logger.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å –∫–æ–¥–æ–º: ${code.substring(0, 3)}...`);

        try {
            const result = await this.authService.resetPasswordWithCode(code, newPassword);
            return {
                success: true,
                message: result.message
            };
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${error.message}`);
            throw new BadRequestException(error.message);
        }
    }

    @Post('change-password')
    @UseGuards(JwtAuthGuard)
    @ApiBearerAuth()
    @ApiOperation({ summary: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' })
    @ApiResponse({ status: 200, description: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' })
    @ApiResponse({ status: 400, description: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' })
    @ApiBody({
        schema: {
            type: 'object',
            properties: {
                userId: { type: 'string', example: '507f1f77bcf86cd799439011', description: '–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' },
                currentPassword: { type: 'string', example: 'currentPassword123' },
                newPassword: { type: 'string', example: 'newPassword123' }
            },
            required: ['currentPassword', 'newPassword']
        }
    })
    async changePassword(
        @Request() req,
        @Body() body: { userId?: string; currentPassword: string; newPassword: string }
    ) {
        const userId = req.user?.userId || body.userId;
        const userLogin = req.user?.login || '—Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        if (!userId) {
            throw new BadRequestException('userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }

        this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userLogin} –º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å`);

        try {
            const result = await this.authService.changePassword(
                userId,
                body.currentPassword,
                body.newPassword
            );
            return {
                success: true,
                message: result.message
            };
        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${error.message}`);
            throw new BadRequestException(error.message);
        }
    }

    // HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    private getSuccessPage(email: string): string {
        return `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                margin: 0;
                background-color: #f5f5f5;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                text-align: center;
                max-width: 400px;
            }
            .success-icon {
                width: 80px;
                height: 80px;
                margin: 0 auto 20px;
                background-color: #4CAF50;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .checkmark {
                color: white;
                font-size: 40px;
            }
            h1 {
                color: #333;
                margin-bottom: 10px;
            }
            .email {
                color: #666;
                font-style: italic;
                margin-bottom: 20px;
            }
            .message {
                color: #555;
                line-height: 1.6;
                margin-bottom: 30px;
            }
            .button {
                display: inline-block;
                padding: 12px 30px;
                background-color: #4CAF50;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s;
            }
            .button:hover {
                background-color: #45a049;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="success-icon">
                <span class="checkmark">‚úì</span>
            </div>
            <h1>Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</h1>
            <p class="email">${email}</p>
            <p class="message">
                –í–∞—à email –∞–¥—Ä–µ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. 
                –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
            </p>
            <a href="/login" class="button">–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—Ö–æ–¥—É</a>
        </div>
    </body>
    </html>
    `;
    }

    private getErrorPage(message: string): string {
        return `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
                margin: 0;
                background-color: #f5f5f5;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 10px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                text-align: center;
                max-width: 400px;
            }
            .error-icon {
                width: 80px;
                height: 80px;
                margin: 0 auto 20px;
                background-color: #f44336;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .cross {
                color: white;
                font-size: 40px;
            }
            h1 {
                color: #333;
                margin-bottom: 20px;
            }
            .message {
                color: #555;
                line-height: 1.6;
                margin-bottom: 30px;
            }
            .button {
                display: inline-block;
                padding: 12px 30px;
                background-color: #2196F3;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s;
            }
            .button:hover {
                background-color: #1976D2;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="error-icon">
                <span class="cross">‚úï</span>
            </div>
            <h1>–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h1>
            <p class="message">${message}</p>
            <a href="/resend-verification" class="button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ</a>
        </div>
    </body>
    </html>
    `;
    }
}