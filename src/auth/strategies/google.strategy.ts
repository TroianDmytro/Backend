// src/auth/strategies/google.strategy.ts
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PassportStrategy } from '@nestjs/passport';
import { Strategy, VerifyCallback } from 'passport-google-oauth20';
import { AuthService } from '../auth.service';

/**
 * Google OAuth Strategy –¥–ª—è Passport
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Google
 */
@Injectable()
export class GoogleStrategy extends PassportStrategy(Strategy, 'google') {
    constructor(
        private configService: ConfigService,
        private authService: AuthService,
    ) {
        super({
            clientID: configService.get<string>('google.clientId') || '',
            clientSecret: configService.get<string>('google.clientSecret') || '',
            callbackURL: configService.get<string>('google.callbackUrl') || '',
            // ‚úÖ –°–û–í–†–ï–ú–ï–ù–ù–´–ï SCOPE (–ù–ï Google+ API)
            scope: [
                'https://www.googleapis.com/auth/userinfo.email',    // –î–æ—Å—Ç—É–ø –∫ email
                'https://www.googleapis.com/auth/userinfo.profile'   // –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
            ],
        });
    }

    /**
     * Callback —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Google OAuth 2.0 API (–ù–ï —É—Å—Ç–∞—Ä–µ–≤—à–∏–π Google+ API)
     * @param accessToken - —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç Google
     * @param refreshToken - —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Google
     * @param profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Google (Google OAuth 2.0 —Ñ–æ—Ä–º–∞—Ç)
     * @param done - callback —Ñ—É–Ω–∫—Ü–∏—è Passport
     */
    async validate(
        accessToken: string,
        refreshToken: string,
        profile: any,
        done: VerifyCallback,
    ): Promise<any> {
        try {
            console.log('üîç Google OAuth 2.0 Profile:', JSON.stringify(profile, null, 2));
            console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Google OAuth 2.0 API');

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Google OAuth 2.0
            const { id, name, emails, photos, provider } = profile;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if (provider !== 'google') {
                console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:', provider);
                return done(new Error('Invalid OAuth provider'), false);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!id) {
                console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Google User ID');
                return done(new Error('Google profile missing user ID'), false);
            }

            if (!emails || emails.length === 0) {
                console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email –≤ Google –ø—Ä–æ—Ñ–∏–ª–µ');
                return done(new Error('Google profile does not have email'), false);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const email = emails[0].value;
            const emailVerified = emails[0].verified || true; // Google emails —Å—á–∏—Ç–∞—é—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
            const firstName = name?.givenName || '';
            const lastName = name?.familyName || '';
            const fullName = name?.displayName || `${firstName} ${lastName}`.trim();
            const avatarUrl = photos?.[0]?.value || null;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
            if (!email.includes('@')) {
                console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email –æ—Ç Google:', email);
                return done(new Error('Invalid email format from Google'), false);
            }

            console.log('üìß Email:', email);
            console.log('üë§ –ò–º—è:', firstName, lastName);
            console.log('‚úÖ Email –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', emailVerified);

            // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AuthService
            const user = await this.authService.validateGoogleUser({
                googleId: id,
                email: email,
                name: firstName,
                second_name: lastName,
                avatar_url: avatarUrl,
                accessToken,
                refreshToken,
            });

            console.log('‚úÖ Google OAuth 2.0 User validated:', user.email);

            return done(null, user);
        } catch (error) {
            console.error('‚ùå Google OAuth 2.0 validation error:', error);

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ–±–∞–≥–∞
            if (error.message.includes('plus.') || error.message.includes('Google+')) {
                console.error('üö® –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ Google+ API!');
                console.error('üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ scope: userinfo.email, userinfo.profile');
            }

            return done(error, false);
        }
    }
}