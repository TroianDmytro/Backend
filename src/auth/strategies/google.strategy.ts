// src/auth/strategies/google.strategy.ts
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { PassportStrategy } from '@nestjs/passport';
import { Strategy, VerifyCallback } from 'passport-google-oauth20';
import { AuthService } from '../auth.service';

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø Google OAuth Strategy
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
 * 1. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è URL
 * 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTPS –¥–ª—è production
 * 3. –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 */
@Injectable()
export class GoogleStrategy extends PassportStrategy(Strategy, 'google') {
    private clientId;
    constructor(
        private configService: ConfigService,
        private authService: AuthService,
    ) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        const clientId = configService.get<string>('google.clientId');
        const clientSecret = configService.get<string>('google.clientSecret');
        const callbackURL = configService.get<string>('google.callbackUrl');

        console.log('üîß Google OAuth –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
        console.log('üìç Client ID:', clientId ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üîë Client Secret:', clientSecret ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
        console.log('üîÑ Callback URL:', callbackURL);

        if (!clientId) {
            throw new Error('GOOGLE_CLIENT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        if (!clientSecret) {
            throw new Error('GOOGLE_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        if (!callbackURL) {
            throw new Error('GOOGLE_CALLBACK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        super({
            clientID: clientId || '',
            clientSecret: clientSecret || '',
            callbackURL: callbackURL || '',
            scope: [
                'https://www.googleapis.com/auth/userinfo.email',
                'https://www.googleapis.com/auth/userinfo.profile'
            ],
            passReqToCallback: false,
            skipUserProfile: false,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (!clientId || !clientSecret || !callbackURL) {
            console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Google OAuth –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
            console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
            console.error('- GOOGLE_CLIENT_ID');
            console.error('- GOOGLE_CLIENT_SECRET');
            console.error('- GOOGLE_CALLBACK_URL');
        }
    }

    /**
     * Callback —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google
     */
    async validate(
        accessToken: string,
        refreshToken: string,
        profile: any,
        done: VerifyCallback,
    ): Promise<any> {
        try {
            console.log('üîç Google OAuth Profile –ø–æ–ª—É—á–µ–Ω:', {
                id: profile.id,
                displayName: profile.displayName,
                emails: profile.emails?.map(e => e.value),
                provider: profile.provider
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            if (!profile.id) {
                console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Google User ID');
                return done(new Error('Missing Google User ID'), false);
            }

            if (!profile.emails || profile.emails.length === 0) {
                console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email –≤ Google –ø—Ä–æ—Ñ–∏–ª–µ');
                return done(new Error('No email provided by Google'), false);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const email = profile.emails[0].value;
            const firstName = profile.name?.givenName || '';
            const lastName = profile.name?.familyName || '';
            const avatarUrl = profile.photos?.[0]?.value || null;

            console.log(`‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);

            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.authService.validateGoogleUser({
                googleId: profile.id,
                email: email,
                name: firstName,
                second_name: lastName,
                avatar_url: avatarUrl,
                accessToken,
                refreshToken,
            });

            console.log(`‚úÖ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${user.email}`);
            return done(null, user);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Google OAuth validation:', error.message);
            return done(error, false);
        }
    }
}