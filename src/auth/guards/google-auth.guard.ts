// src/auth/guards/google-auth.guard.ts
import { Injectable, Logger } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô Guard –¥–ª—è Google OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
@Injectable()
export class GoogleAuthGuard extends AuthGuard('google') {
    private readonly logger = new Logger(GoogleAuthGuard.name);
    private userFound = false; // –§–ª–∞–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó

    constructor() {
        super({
            // ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Google OAuth
            accessType: 'offline', // –ü–æ–ª—É—á–∞–µ–º refresh token
            prompt: 'consent',      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    handleRequest(err: any, user: any, info: any, context: any) {
        this.logger.debug(`üîç handleRequest –≤–∏–∫–ª–∏–∫:`, {
            hasError: !!err,
            hasUser: !!user,
            userFoundFlag: this.userFound
        });

        // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞
        if (err) {
            this.logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ Google Auth Guard:', err.message);
            throw err;
        }

        // –ü–µ—Ä—à–∏–π –≤–∏–∫–ª–∏–∫ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º - —É—Å–ø—ñ—Ö
        if (user && !this.userFound) {
            this.userFound = true;
            this.logger.log(`‚úÖ Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞: ${user.email}`);
            return user;
        }

        // –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –≤–∏–∫–ª–∏–∫ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ
        if (user && this.userFound) {
            return user;
        }

        // –î—Ä—É–≥–∏–π –≤–∏–∫–ª–∏–∫ –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–µ—Ä—à–æ–≥–æ - —Ü–µ –Ω–æ—Ä–º–∞
        if (!user && this.userFound) {
            this.logger.debug('üîÑ –î—Ä—É–≥–∏–π –≤–∏–∫–ª–∏–∫ handleRequest (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è OAuth)');
            return null; // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π flow
        }

        // –Ø–∫—â–æ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –±—É–ª–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—è –ø–æ–º–∏–ª–∫–∞
        if (!user && !this.userFound) {
            this.logger.error('‚ùå Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—å - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π');
            throw new Error('Google authorization failed');
        }

        return user;
    }

    /**
     * –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –Ω–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º
     */
    canActivate(context: any) {
        this.userFound = false;
        return super.canActivate(context);
    }
}