// src/subscription-plans/subscription-plans.service.ts
import { Injectable, Logger, ConflictException, NotFoundException, BadRequestException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { SubscriptionPlan, SubscriptionPlanDocument } from './schemas/subscription-plan.schema';
import { CreatePlanDto, UpdatePlanDto } from './dto/subscription-plan.dto';

@Injectable()
export class SubscriptionPlansService {
    private readonly logger = new Logger(SubscriptionPlansService.name);

    constructor(
        @InjectModel(SubscriptionPlan.name) private planModel: Model<SubscriptionPlanDocument>
    ) { }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    async getAllPlans(page: number = 1, limit: number = 10, activeOnly: boolean = true): Promise<{
        plans: SubscriptionPlanDocument[];
        totalItems: number;
        totalPages: number;
    }> {
        const skip = (page - 1) * limit;
        const filter = activeOnly ? { is_active: true } : {};

        const [plans, totalItems] = await Promise.all([
            this.planModel
                .find(filter)
                .sort({ sort_order: 1, price: 1 })
                .skip(skip)
                .limit(limit)
                .exec(),
            this.planModel.countDocuments(filter).exec()
        ]);

        const totalPages = Math.ceil(totalItems / limit);

        return { plans, totalItems, totalPages };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ ID
     */
    async getPlanById(id: string): Promise<SubscriptionPlanDocument> {
        const plan = await this.planModel.findById(id).exec();
        if (!plan) {
            throw new NotFoundException(`–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        return plan;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
     */
    async createCustomPlan(planData: CreatePlanDto): Promise<SubscriptionPlanDocument> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
        const existingPlan = await this.planModel.findOne({ slug: planData.slug }).exec();
        if (existingPlan) {
            throw new ConflictException(`–ü–ª–∞–Ω —Å slug "${planData.slug}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        const existingName = await this.planModel.findOne({ name: planData.name }).exec();
        if (existingName) {
            throw new ConflictException(`–ü–ª–∞–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${planData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∫–∏–¥–∫—É
        if (planData.discount_percent && planData.discount_percent > 0) {
            if (!planData.original_price) {
                throw new BadRequestException('–î–ª—è —Å–∫–∏–¥–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É');
            }
            if (planData.original_price <= planData.price) {
                throw new BadRequestException('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã');
            }
        }

        const newPlan = new this.planModel({
            ...planData,
            currency: planData.currency || 'UAH',
            is_active: planData.is_active !== undefined ? planData.is_active : true,
            subscribers_count: 0,
            total_revenue: 0
        });

        const savedPlan = await newPlan.save();
        this.logger.log(`‚ú® –°–æ–∑–¥–∞–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω: "${savedPlan.name}"`);

        return savedPlan;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
     */
    async updatePlan(id: string, updateData: UpdatePlanDto): Promise<SubscriptionPlanDocument> {
        const plan = await this.planModel.findById(id).exec();
        if (!plan) {
            throw new NotFoundException(`–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug (–µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
        if (updateData.slug && updateData.slug !== plan.slug) {
            const existingSlug = await this.planModel.findOne({
                slug: updateData.slug,
                _id: { $ne: id }
            }).exec();
            if (existingSlug) {
                throw new ConflictException(`–ü–ª–∞–Ω —Å slug "${updateData.slug}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
        if (updateData.name && updateData.name !== plan.name) {
            const existingName = await this.planModel.findOne({
                name: updateData.name,
                _id: { $ne: id }
            }).exec();
            if (existingName) {
                throw new ConflictException(`–ü–ª–∞–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${updateData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            }
        }

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–∫–∏–¥–∫—É
        const finalPrice = updateData.price !== undefined ? updateData.price : plan.price;
        const finalOriginalPrice = updateData.original_price !== undefined ? updateData.original_price : plan.original_price;
        const finalDiscountPercent = updateData.discount_percent !== undefined ? updateData.discount_percent : plan.discount_percent;

        if (finalDiscountPercent && finalDiscountPercent > 0) {
            if (!finalOriginalPrice) {
                throw new BadRequestException('–î–ª—è —Å–∫–∏–¥–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É');
            }
            if (finalOriginalPrice <= finalPrice) {
                throw new BadRequestException('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã');
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
        Object.assign(plan, updateData);
        const updatedPlan = await plan.save();

        this.logger.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω –ø–ª–∞–Ω: "${updatedPlan.name}"`);
        return updatedPlan;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–Ω–∞
     */
    async deletePlan(id: string, force: boolean = false): Promise<{ deleted: boolean }> {
        const plan = await this.planModel.findById(id).exec();
        if (!plan) {
            throw new NotFoundException(`–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–ª–∞–Ω
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ SubscriptionsService –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        // const activeSubscriptions = await this.subscriptionsService.countActiveSubscriptionsByPlan(id);
        // if (activeSubscriptions > 0 && force) {
        //     throw new ConflictException(`–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω —Å ${activeSubscriptions} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏`);
        // }

        if (force) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            await this.planModel.findByIdAndDelete(id).exec();
            this.logger.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–ª–∞–Ω: "${plan.name}"`);
            return { deleted: true };
        } else {
            // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
            plan.is_active = false;
            await plan.save();
            this.logger.log(`üîí –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω: "${plan.name}"`);
            return { deleted: false };
        }
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–Ω–∞
     */
    async toggleActivation(id: string, isActive: boolean): Promise<SubscriptionPlanDocument> {
        const plan = await this.planModel.findById(id).exec();
        if (!plan) {
            throw new NotFoundException(`–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        plan.is_active = isActive;
        const updatedPlan = await plan.save();

        this.logger.log(`${isActive ? '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'} –ø–ª–∞–Ω: "${plan.name}"`);
        return updatedPlan;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–æ–≤
     */
    async getStatistics(): Promise<any> {
        const [
            totalPlans,
            activePlans,
            popularPlans,
            featuredPlans,
            totalSubscribers,
            totalRevenue,
            topPlans
        ] = await Promise.all([
            this.planModel.countDocuments().exec(),
            this.planModel.countDocuments({ is_active: true }).exec(),
            this.planModel.countDocuments({ is_popular: true, is_active: true }).exec(),
            this.planModel.countDocuments({ is_featured: true, is_active: true }).exec(),
            this.planModel.aggregate([
                { $group: { _id: null, total: { $sum: '$subscribers_count' } } }
            ]).exec().then(result => result[0]?.total || 0),
            this.planModel.aggregate([
                { $group: { _id: null, total: { $sum: '$total_revenue' } } }
            ]).exec().then(result => result[0]?.total || 0),
            this.planModel
                .find({ is_active: true })
                .sort({ subscribers_count: -1 })
                .limit(5)
                .select('name subscribers_count total_revenue')
                .exec()
        ]);

        return {
            totalPlans,
            activePlans,
            inactivePlans: totalPlans - activePlans,
            popularPlans,
            featuredPlans,
            totalSubscribers,
            totalRevenue,
            averageRevenuePerPlan: totalPlans > 0 ? Math.round(totalRevenue / totalPlans) : 0,
            topPlans: topPlans.map(plan => ({
                id: plan.id,
                name: plan.name,
                subscribers: plan.subscribers_count,
                revenue: plan.total_revenue
            }))
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async seedBasicPlans(): Promise<SubscriptionPlanDocument[]> {
        this.logger.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤...');

        const basicPlans: CreatePlanDto[] = [
            {
                name: '–ë–∞–∑–æ–≤—ã–π 1 –º–µ—Å—è—Ü',
                slug: 'basic-1-month',
                description: '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º –Ω–∞ 1 –º–µ—Å—è—Ü',
                period_type: '1_month',
                price: 500,
                currency: 'UAH',
                features: [
                    '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º',
                    '–û–Ω–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
                ],
                benefits: [
                    '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è',
                    '–ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞'
                ],
                color: '#74C0FC',
                icon: 'üì±',
                sort_order: 1
            },
            {
                name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç 3 –º–µ—Å—è—Ü–∞',
                slug: 'standard-3-months',
                description: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è',
                period_type: '3_months',
                price: 1000,
                original_price: 1500,
                discount_percent: 33,
                currency: 'UAH',
                is_popular: true,
                features: [
                    '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º',
                    '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏',
                    '–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π',
                    '–ì—Ä—É–ø–ø—ã –≤ Telegram'
                ],
                benefits: [
                    '–≠–∫–æ–Ω–æ–º–∏—è 500 –≥—Ä–Ω',
                    '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è',
                    '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
                ],
                color: '#51CF66',
                icon: 'üéØ',
                sort_order: 2
            },
            {
                name: '–ü—Ä–µ–º–∏—É–º 6 –º–µ—Å—è—Ü–µ–≤',
                slug: 'premium-6-months',
                description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –ø–æ–ª–≥–æ–¥–∞',
                period_type: '6_months',
                price: 2000,
                original_price: 3000,
                discount_percent: 33,
                currency: 'UAH',
                is_featured: true,
                features: [
                    '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º',
                    '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7',
                    '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏',
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
                    '–ö–∞—Ä—å–µ—Ä–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –≤–µ–±–∏–Ω–∞—Ä–∞–º',
                    '–°–∫–∏–¥–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã'
                ],
                benefits: [
                    '–≠–∫–æ–Ω–æ–º–∏—è 1000 –≥—Ä–Ω',
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
                    '–ö–∞—Ä—å–µ—Ä–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                ],
                color: '#FFD43B',
                icon: 'üëë',
                sort_order: 3
            },
            {
                name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π 12 –º–µ—Å—è—Ü–µ–≤',
                slug: 'professional-12-months',
                description: '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞',
                period_type: '12_months',
                price: 3500,
                original_price: 6000,
                discount_percent: 42,
                currency: 'UAH',
                features: [
                    '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º',
                    'VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–í—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
                    '–õ–∏—á–Ω—ã–π –º–µ–Ω—Ç–æ—Ä',
                    '–ü–æ–º–æ—â—å –≤ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ',
                    '–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö',
                    '–î–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –∫—É—Ä—Å–∞–º',
                    'Networking —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏',
                    '–°–∫–∏–¥–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏'
                ],
                benefits: [
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è 2500 –≥—Ä–Ω',
                    '–õ–∏—á–Ω—ã–π –º–µ–Ω—Ç–æ—Ä',
                    '–ü–æ–º–æ—â—å –≤ –∫–∞—Ä—å–µ—Ä–µ',
                    '–°–µ—Ç–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
                    '–ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ'
                ],
                color: '#9775FA',
                icon: 'üöÄ',
                sort_order: 4
            }
        ];

        const createdPlans: SubscriptionPlanDocument[] = [];

        for (const planData of basicPlans) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞–Ω —Å —Ç–∞–∫–∏–º slug
                const existingPlan = await this.planModel.findOne({ slug: planData.slug }).exec();

                if (existingPlan) {
                    this.logger.warn(`üìã –ü–ª–∞–Ω "${planData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
                    createdPlans.push(existingPlan);
                    continue;
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                const newPlan = new this.planModel(planData);
                const savedPlan = await newPlan.save();

                this.logger.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω: "${savedPlan.name}" - ${savedPlan.price} ${savedPlan.currency}`);
                createdPlans.push(savedPlan);

            } catch (error) {
                this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ "${planData.name}": ${error.message}`);
            }
        }

        this.logger.log(`üéâ –°–æ–∑–¥–∞–Ω–æ ${createdPlans.length} —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤`);
        return createdPlans;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async getActivePlans(): Promise<SubscriptionPlanDocument[]> {
        return this.planModel
            .find({ is_active: true })
            .sort({ sort_order: 1, price: 1 })
            .exec();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ slug
     */
    async getPlanBySlug(slug: string): Promise<SubscriptionPlanDocument | null> {
        return this.planModel.findOne({ slug, is_active: true }).exec();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∞
     */
    async updatePlanStats(planId: string, subscribersCount: number, revenue: number): Promise<void> {
        await this.planModel.findByIdAndUpdate(planId, {
            $inc: {
                subscribers_count: subscribersCount,
                total_revenue: revenue
            }
        }).exec();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async getPopularPlans(): Promise<SubscriptionPlanDocument[]> {
        return this.planModel
            .find({ is_active: true, is_popular: true })
            .sort({ sort_order: 1 })
            .exec();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async getFeaturedPlans(): Promise<SubscriptionPlanDocument[]> {
        return this.planModel
            .find({ is_active: true, is_featured: true })
            .sort({ sort_order: 1 })
            .exec();
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    async clearAllPlans(): Promise<void> {
        await this.planModel.deleteMany({}).exec();
        this.logger.log('üóëÔ∏è –í—Å–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã —É–¥–∞–ª–µ–Ω—ã');
    }

    /**
     * –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async recreateBasicPlans(): Promise<SubscriptionPlanDocument[]> {
        await this.clearAllPlans();
        return this.seedBasicPlans();
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–ª–∞–Ω–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
     */
    async searchPlans(query: {
        name?: string;
        period_type?: string;
        currency?: string;
        min_price?: number;
        max_price?: number;
        is_popular?: boolean;
        is_featured?: boolean;
    }): Promise<SubscriptionPlanDocument[]> {
        const filter: any = { is_active: true };

        if (query.name) {
            filter.name = { $regex: query.name, $options: 'i' };
        }

        if (query.period_type) {
            filter.period_type = query.period_type;
        }

        if (query.currency) {
            filter.currency = query.currency;
        }

        if (query.min_price !== undefined || query.max_price !== undefined) {
            filter.price = {};
            if (query.min_price !== undefined) filter.price.$gte = query.min_price;
            if (query.max_price !== undefined) filter.price.$lte = query.max_price;
        }

        if (query.is_popular !== undefined) {
            filter.is_popular = query.is_popular;
        }

        if (query.is_featured !== undefined) {
            filter.is_featured = query.is_featured;
        }

        return this.planModel
            .find(filter)
            .sort({ sort_order: 1, price: 1 })
            .exec();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥—É
     */
    async getPlansByPeriod(periodType: string): Promise<SubscriptionPlanDocument[]> {
        return this.planModel
            .find({
                period_type: periodType,
                is_active: true
            })
            .sort({ price: 1 })
            .exec();
    }
}