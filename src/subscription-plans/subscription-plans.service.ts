// src/subscription-plans/subscription-plans.service.ts
import { Injectable, Logger, ConflictException, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { SubscriptionPlan, SubscriptionPlanDocument } from './schemas/subscription-plan.schema';

interface CreatePlanDto {
    name: string;
    slug: string;
    description: string;
    period_type: '1_month' | '3_months' | '6_months' | '12_months';
    price: number;
    currency?: string;
    discount_percent?: number;
    original_price?: number;
    is_popular?: boolean;
    is_featured?: boolean;
    features?: string[];
    benefits?: string[];
    color?: string;
    icon?: string;
    sort_order?: number;
}

@Injectable()
export class SubscriptionPlansService {
    private readonly logger = new Logger(SubscriptionPlansService.name);

    constructor(
        @InjectModel(SubscriptionPlan.name) private planModel: Model<SubscriptionPlanDocument>
    ) { }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async seedBasicPlans(): Promise<SubscriptionPlanDocument[]> {
        this.logger.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤...');

        const basicPlans: CreatePlanDto[] = [
            {
                name: '–ë–∞–∑–æ–≤—ã–π 1 –º–µ—Å—è—Ü',
                slug: 'basic-1-month',
                description: '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º –Ω–∞ 1 –º–µ—Å—è—Ü',
                period_type: '1_month',
                price: 500,
                currency: 'UAH',
                features: [
                    '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º',
                    '–û–Ω–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
                ],
                benefits: [
                    '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è',
                    '–ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞'
                ],
                color: '#74C0FC',
                icon: 'üì±',
                sort_order: 1
            },
            {
                name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç 3 –º–µ—Å—è—Ü–∞',
                slug: 'standard-3-months',
                description: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è',
                period_type: '3_months',
                price: 1000,
                original_price: 1500,
                discount_percent: 33,
                currency: 'UAH',
                is_popular: true,
                features: [
                    '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º',
                    '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏',
                    '–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π',
                    '–ì—Ä—É–ø–ø—ã –≤ Telegram'
                ],
                benefits: [
                    '–≠–∫–æ–Ω–æ–º–∏—è 500 –≥—Ä–Ω',
                    '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è',
                    '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
                ],
                color: '#51CF66',
                icon: 'üéØ',
                sort_order: 2
            },
            {
                name: '–ü—Ä–µ–º–∏—É–º 6 –º–µ—Å—è—Ü–µ–≤',
                slug: 'premium-6-months',
                description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ –ø–æ–ª–≥–æ–¥–∞',
                period_type: '6_months',
                price: 2000,
                original_price: 3000,
                discount_percent: 33,
                currency: 'UAH',
                is_featured: true,
                features: [
                    '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º',
                    '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7',
                    '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏',
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
                    '–ö–∞—Ä—å–µ—Ä–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –≤–µ–±–∏–Ω–∞—Ä–∞–º',
                    '–°–∫–∏–¥–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã'
                ],
                benefits: [
                    '–≠–∫–æ–Ω–æ–º–∏—è 1000 –≥—Ä–Ω',
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
                    '–ö–∞—Ä—å–µ—Ä–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
                ],
                color: '#FFD43B',
                icon: 'üëë',
                sort_order: 3
            },
            {
                name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π 12 –º–µ—Å—è—Ü–µ–≤',
                slug: 'professional-12-months',
                description: '–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞',
                period_type: '12_months',
                price: 3500,
                original_price: 6000,
                discount_percent: 42,
                currency: 'UAH',
                features: [
                    '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º',
                    'VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                    '–í—Å–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
                    '–õ–∏—á–Ω—ã–π –º–µ–Ω—Ç–æ—Ä',
                    '–ü–æ–º–æ—â—å –≤ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ',
                    '–£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö',
                    '–î–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –∫—É—Ä—Å–∞–º',
                    'Networking —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏',
                    '–°–∫–∏–¥–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏'
                ],
                benefits: [
                    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è 2500 –≥—Ä–Ω',
                    '–õ–∏—á–Ω—ã–π –º–µ–Ω—Ç–æ—Ä',
                    '–ü–æ–º–æ—â—å –≤ –∫–∞—Ä—å–µ—Ä–µ',
                    '–°–µ—Ç–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
                    '–ü–æ–ª–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ'
                ],
                color: '#9775FA',
                icon: 'üöÄ',
                sort_order: 4
            }
        ];

        const createdPlans: SubscriptionPlanDocument[] = [];

        for (const planData of basicPlans) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞–Ω —Å —Ç–∞–∫–∏–º slug
                const existingPlan = await this.planModel.findOne({ slug: planData.slug }).exec();

                if (existingPlan) {
                    this.logger.warn(`üìã –ü–ª–∞–Ω "${planData.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
                    createdPlans.push(existingPlan);
                    continue;
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                const newPlan = new this.planModel(planData);
                const savedPlan = await newPlan.save();

                this.logger.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω: "${savedPlan.name}" - ${savedPlan.price} ${savedPlan.currency}`);
                createdPlans.push(savedPlan);

            } catch (error) {
                this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ "${planData.name}": ${error.message}`);
            }
        }

        this.logger.log(`üéâ –°–æ–∑–¥–∞–Ω–æ ${createdPlans.length} —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤`);
        return createdPlans;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async getActivePlans(): Promise<SubscriptionPlanDocument[]> {
        return this.planModel
            .find({ is_active: true })
            .sort({ sort_order: 1, price: 1 })
            .exec();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ slug
     */
    async getPlanBySlug(slug: string): Promise<SubscriptionPlanDocument | null> {
        return this.planModel.findOne({ slug, is_active: true }).exec();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
     */
    async createCustomPlan(planData: CreatePlanDto): Promise<SubscriptionPlanDocument> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
        const existingPlan = await this.planModel.findOne({ slug: planData.slug }).exec();
        if (existingPlan) {
            throw new ConflictException(`–ü–ª–∞–Ω —Å slug "${planData.slug}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }

        const newPlan = new this.planModel({
            ...planData,
            currency: planData.currency || 'UAH',
            is_active: true
        });

        const savedPlan = await newPlan.save();
        this.logger.log(`‚ú® –°–æ–∑–¥–∞–Ω –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω: "${savedPlan.name}"`);

        return savedPlan;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∞
     */
    async updatePlanStats(planId: string, subscribersCount: number, revenue: number): Promise<void> {
        await this.planModel.findByIdAndUpdate(planId, {
            $inc: {
                subscribers_count: subscribersCount,
                total_revenue: revenue
            }
        }).exec();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async getPopularPlans(): Promise<SubscriptionPlanDocument[]> {
        return this.planModel
            .find({ is_active: true, is_popular: true })
            .sort({ sort_order: 1 })
            .exec();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async getFeaturedPlans(): Promise<SubscriptionPlanDocument[]> {
        return this.planModel
            .find({ is_active: true, is_featured: true })
            .sort({ sort_order: 1 })
            .exec();
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    async clearAllPlans(): Promise<void> {
        await this.planModel.deleteMany({}).exec();
        this.logger.log('üóëÔ∏è –í—Å–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã —É–¥–∞–ª–µ–Ω—ã');
    }

    /**
     * –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤
     */
    async recreateBasicPlans(): Promise<SubscriptionPlanDocument[]> {
        await this.clearAllPlans();
        return this.seedBasicPlans();
    }
}